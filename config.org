#+title:     Doom Emacs Config
#+author:    Jacob Hilker
#+email:     jacob.hilker2@gmail.com
#+property: header-args:emacs-lisp :tangle config.el
#+startup: fold


This is my doom emacs literate config.

* My =init.el=
:PROPERTIES:
:header-args:emacs-lisp: :tangle init.el
:END:
Here's my init.el - it's not all that fancy.
#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;(ivy               ; a search engine for love and life
       ; +icons
       ; +childframe)
       (vertico           ; the search engine of the future
        +icons)
       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
      ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures         ; ligatures and symbols to make your code pretty again
        +iosevka)
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired             ; making dired pretty [functional]
        +icons
        +ranger)
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org               ; organize your plain life in plain text
        +hugo
        +roam2
        +pretty
        +pandoc
        +publish)
        ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))

#+end_src


* Extra Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle packages.el
:END:
This is where I add any extra packages  for my config.
** UI Packages
*** Childframes
Sometimes I just want a childframe instead of a new temporary buffer.
#+begin_src emacs-lisp
(package! vertico-posframe)

(package! hydra-posframe
  :recipe (:host github :repo "Ladicle/hydra-posframe"))
#+end_src

** Hydra Packages
*** Pretty Hydra
This package lets me have prettier hydras.
#+begin_src emacs-lisp
(package! pretty-hydra
  :recipe (:host github :repo "jerrypnz/major-mode-hydra.el"
           :files ("pretty-hydra.el")))
#+end_src

** Org Mode Packages
*** Tasks and Agenda
**** DOCT
DOCT is a package that makes it easier to create capture templates.
#+begin_src emacs-lisp
(package! doct)
#+end_src


**** Org-Recur
Org-recur lets me have recurring tasks more easily.
#+begin_src emacs-lisp
(package! org-recur)
#+end_src

**** Org Super Agenda
#+begin_src emacs-lisp
(package! org-super-agenda)
#+end_src

**** Org QL
#+begin_src emacs-lisp
(package! org-ql)
#+end_src

*** Note-Taking with Org-Roam
**** Vulpea
Vulpea makes it easier to quickly edit metadata about a particula org-roam-node.
#+begin_src emacs-lisp
(package! vulpea)
#+end_src

**** Org-Transclusion
Org-transclusion lets me include contents of other org-fules so I can get a preview.
#+begin_src emacs-lisp
(package! org-transclusion)
#+end_src

*** Publishing
**** ESXML
A more useful HTML templating package.
#+begin_src emacs-lisp
(package! esxml
  :recipe (:host github :repo "tali713/esxml"))
#+end_src



* UI
I want to use Iosevka along with Gruvbox. I use my own custom build of Iosevka.
#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox
      doom-font (font-spec :family "Jhiosevka NF" :size 14)
      doom-variable-pitch-font (font-spec :family "Jhiosevka Sans" :size 14))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

;(custom-set-faces!
;  '(font-lock-comment-face :slant italic))

(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
;(set-face-attribute 'default nil :background "#1d2021")
#+end_src

I also want relative line numbers.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

And finally, I want to change the dashboard header to be my own custom one.
#+begin_src emacs-lisp
;(after! doom-dashboard
;  (setq +doom-dashboard-banner-file "~/.config/doom/doom-banner.png"))

(setq +doom-dashboard-banner-file "~/.config/doom/doom-banner.png")
;(setq fancy-splash-image "~/.config/doom/doom-banner.png")
#+end_src

** Childframes
*** Vertico Posframe
Vertico-Posframe lets me display vertico completions in a childframe.
#+begin_src emacs-lisp
(after! persp-mode
  (vertico-posframe-mode 1))
#+end_src

*** Hydra Posframe
Hydra Posframe allows me to display hydras in a childframe.
#+begin_src emacs-lisp
(after! hydra
  (hydra-posframe-mode 1))
#+end_src

* Org-Mode
** Initial Setup
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org/")

(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "INPR(i)" "HOLD(h)" "|" "DONE(d)" "CANC(c)"))
        org-todo-keyword-faces '(("TODO" . (:foreground "#cc241d" :underline t)))
        org-agenda-files '("gtd/inbox.org" "gtd/orgzly.org" "gtd/todo.org" "gtd/gcal.org")
        org-agenda-start-day nil ;; today
        org-ellipsis "â–¾"))
#+end_src

** UI Changes
#+begin_src emacs-lisp
(defun jh/org-ui-hook ()
  (variable-pitch-mode 1)
  (setq display-line-numbers nil)
  (setq display-line-numbers-type 'nil)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch))

(add-hook! 'org-mode-hook #'jh/org-ui-hook)
#+end_src

** Tasks and Agenda
*** Package Setup
#+begin_src emacs-lisp
(after! org-agenda
  (org-super-agenda-mode))

(add-hook! 'org-mode-hook #'org-recur-mode)

(add-hook! 'org-agenda-mode-hook #'org-recur-agenda-mode)
#+end_src

*** Custom Agenda Commands
I like to have a few custom agenda commands - here I'll describe them all, and I'll explain each view in more detail.
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
'(("d" "Dashboard"
    ((agenda "" ((org-agenda-span 'day)
                (org-agenda-time-grid '((today require-timed remove-match)()() "" "â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”"))
                (org-agenda-current-time-string "â—„â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€” Now")
                (org-agenda-remove-tags t)
                (org-agenda-compact-blocks t)))))))
#+end_src


** Projects
** Campaign Manager
** Writing

** Note-Taking with Org-roam
*** Initial Setup
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-directory "~/Dropbox/roam/"
        org-roam-db-location "~/.org-roam.db"
        org-roam-completion-everywhere t)
  (cl-defmethod org-roam-node-namespace ((node org-roam-node))
    "Return the currently set namespace for the NODE."
    (let ((namespace (cdr (assoc-string "NAMESPACE" (org-roam-node-properties node)))))
      (if (string= namespace (file-name-base (org-roam-node-file node)))
          "" ; or return the current title, e.g. (org-roam-node-title node)
        (format "%s" namespace))))

  (setq org-roam-node-display-template (concat "${namespace:15} ${title:*}" (propertize "${doom-tags:50}" 'face 'org-tag))))
#+end_src

** Blogging with Hugo
#+begin_src emacs-lisp
(after! ox-hugo
  (setq org-hugo-base-dir "~/Projects/sites/jhilker.gitlab.io"
        org-hugo-auto-set-lastmod t
        org-hugo-front-matter-format "yaml"
        org-hugo-suppress-lastmod-period 86400
        org-hugo-section "blog"))
#+end_src

** Publishing
** Keybindings
#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
#+end_src

* Elfeed
Elfeed is an excellent RSS reader, though I do want it to update when I open.
#+begin_src emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@2-weeks-ago +unread"))

(after! elfeed-org
  (setq rmh-elfeed-org-files '("~/Dropbox/org/elfeed.org")))

(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
#+end_src

** Filter Hydra
I want to set up a hydra for filtering elfeed articles based on tags, along with a binding for it.
#+begin_src emacs-lisp
(pretty-hydra-define jh/elfeed-search-hydra (:title "Elfeed Filters" :quit-key "q" :color teal)
  ("Category"
   (("d" (elfeed-search-set-filter "@2-weeks-ago +unread") "Default")
    ("n" (elfeed-search-set-filter "@2-weeks-ago +unread +news") "News")
    ("c" (elfeed-search-set-filter "@2-weeks-ago +unread +campaign") "Campaigns")
    ("f" (elfeed-search-set-filter "@2-weeks-ago +unread +forum") "Forums")
    ("p" (elfeed-search-set-filter "+podcast") "Podcasts")
    ("R" (elfeed-search-set-filter "@2-weeks-ago +unread +reddit") "Reddit")
    ("b" (elfeed-search-set-filter "@2-weeks-ago +unread +blog") "Blogs"))))
#+end_src

* Keybindings
** General Bindings
First, I want to bind =SPC-SPC= to run =M-x= instead of =projectile-find-file=.
#+begin_src emacs-lisp
(map! :leader
      (:desc "Find file in project" ":" #'projectile-find-file)
      (:desc "M-x" "SPC" #'execute-extended-command))
#+end_src

** Magit Keybindings
#+begin_src emacs-lisp
#+end_src



